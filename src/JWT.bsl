
Функция Зашифровать(Знач СекретныйКлюч, Знач ПолезнаяНагрузка = Неопределено, Знач ДопЗаголовки = Неопределено) Экспорт
	
	Если ПолезнаяНагрузка = Неопределено Тогда
		ПолезнаяНагрузка = Новый Структура;
	КонецЕсли;
	
	Заголовок = Новый Структура;
	Заголовок.Вставить("typ", "JWT");
	Заголовок.Вставить("alg", "HS256");
	Если ДопЗаголовки <> Неопределено Тогда
		Для Каждого ДопЗаголовок Из ДопЗаголовки Цикл
			Заголовок.Вставить(ДопЗаголовок.Ключ, ДопЗаголовок.Значение);
		КонецЦикла;
	КонецЕсли;
	
	БайтыЗаголовка = ПолучитьДвоичныеДанныеИзСтроки(СформироватьJSON(Заголовок));
	БайтыПолезнойНагрузки = ПолучитьДвоичныеДанныеИзСтроки(СформироватьJSON(ПолезнаяНагрузка));
	
	Сегменты = Новый Массив;
	Сегменты.Добавить(ЗашифроватьBase64Url(БайтыЗаголовка));
	Сегменты.Добавить(ЗашифроватьBase64Url(БайтыПолезнойНагрузки));
	
	СтрокаВПодпись = СтрСоединить(Сегменты, ".");
	
	Подпись = Криптография.ХАКС(
		ПолучитьДвоичныеДанныеИзСтроки(СекретныйКлюч),
		ПолучитьДвоичныеДанныеИзСтроки(СтрокаВПодпись),
		ХешФункция.SHA256);
		
	Сегменты.Добавить(ЗашифроватьBase64Url(Подпись));
	
	Результат = СтрСоединить(Сегменты, ".");
	
	Возврат Результат;

КонецФункции

Функция Расшифровать(Знач Токен, Знач СекретныйКлюч, Знач Проверка = Истина) Экспорт

	Части = СтрРазделить(Токен, ".");
	Если Части.Количество() <> 3 Тогда
		ВызватьИсключение "JWT.Расшифровать: Токен должен состоять из трёх частей, разделённых точкой";
	КонецЕсли;
	
	Заголовок = Части[0];
	ПолезнаяНагрузка = Части[1];
	Крипто = РасшифроватьBase64Url(Части[2]);
	
	ЗаголовокJSON = ПолучитьСтрокуИзДвоичныхДанных(РасшифроватьBase64Url(Заголовок));
	ПолезнаяНагрузкаJSON = ПолучитьСтрокуИзДвоичныхДанных(РасшифроватьBase64Url(ПолезнаяНагрузка));
	
	ДанныеЗаголовка = РазобратьJSON(ЗаголовокJSON);
	ДанныеПолезнойНагрузки = РазобратьJSON(ПолезнаяНагрузкаJSON);
	
	Если Проверка Тогда
		Если ДанныеЗаголовка.Property("alg") Тогда
			Если ДанныеЗаголовка.alg <> "HS256" Тогда
				ВызватьИсключение "JWT.Расшифровать: неподдерживаемый алгоритм: " + ДанныеЗаголовка.alg;
			КонецЕсли;
		Else
			ВызватьИсключение "JWT.Расшифровать: в заголовке отсутствует поле 'alg'";
		КонецЕсли;

		Подпись = Криптография.ХАКС(
			ПолучитьДвоичныеДанныеИзСтроки(СекретныйКлюч),
			ПолучитьДвоичныеДанныеИзСтроки(Заголовок + "." + ПолезнаяНагрузка),
			ХешФункция.SHA256);
			
		Если Base64Строка(Крипто) <> Base64Строка(Подпись) Тогда
			ВызватьИсключение "JWT.Расшифровать: Некорректная подпись";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПолезнойНагрузки;

КонецФункции

Функция ЗашифроватьBase64Url(Знач Ввод)

	Вывод = Base64Строка(Ввод);
	Вывод = СтрРазделить(Вывод, "=")[0]; // Убираем оконечные '='
	Вывод = СтрЗаменить(Вывод, Символы.ВК + Символы.ПС, "");
	Вывод = СтрЗаменить(Вывод, "+", "-"); // 62-й символ кодировки
	Вывод = СтрЗаменить(Вывод, "/", "_"); // 63-й символ кодировки

	Возврат Вывод;

КонецФункции

Функция РасшифроватьBase64Url(Знач Ввод)
	
	Результат = Ввод;
	Результат = СтрЗаменить(Ввод, "-", "+"); // 62-й символ кодировки
	Результат = СтрЗаменить(Результат, "_", "/"); // 63-й символ кодировки
	Проверка4 = СтрДлина(Результат) % 4;
	Если Проверка4 = 1 Тогда
		ВызватьИсключение "JWT.РасшифроватьBase64Url: Некорректная строка BASE64Url: " + Ввод;
	ИначеЕсли Проверка4 = 2 Тогда
		Результат = Результат + "=="; // Два символа выравнивания
	ИначеЕсли Проверка4 = 3 Тогда
		Результат = Результат + "="; // Один символ выравнивания
	КонецЕсли;

	Возврат Base64Значение(Результат);
	
КонецФункции

Функция СформироватьJSON(Объект, ПереносСтрок = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПереносСтрок = Неопределено Тогда
		ПереносСтрок = ПереносСтрокJSON.Нет;
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	Параметры = Новый ПараметрыЗаписиJSON(ПереносСтрок);
	ЗаписьJSON.УстановитьСтроку(Параметры);
	ЗаписатьJSON(ЗаписьJSON, Объект);
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция РазобратьJSON(JSON) Экспорт

	Если Не ЗначениеЗаполнено(JSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, Ложь);

КонецФункции

Процедура Тест() Экспорт
	
	СекретныйКлюч = "Секрет";
	ПолезнаяНагрузка = Новый Структура;
	ПолезнаяНагрузка.Вставить("sub", "1234567890");
	ПолезнаяНагрузка.Вставить("name", "Василий Пупкин");
	ПолезнаяНагрузка.Вставить("admin", Истина);
	
	Токен = Зашифровать(СекретныйКлюч, ПолезнаяНагрузка);
	
	РасшифрованнаяПолезнаяНагрузка = Расшифровать(Токен, СекретныйКлюч);

КонецПроцедуры